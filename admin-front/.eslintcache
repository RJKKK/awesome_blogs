[{"/Users/mac/projects/awesome_blogs_front/admin-front/src/index.tsx":"1","/Users/mac/projects/awesome_blogs_front/admin-front/src/untils/axios_extend.tsx":"2","/Users/mac/projects/awesome_blogs_front/admin-front/src/views/Login.tsx":"3","/Users/mac/projects/awesome_blogs_front/admin-front/src/api/index.tsx":"4","/Users/mac/projects/awesome_blogs_front/admin-front/src/untils/FormValidation.ts":"5","/Users/mac/projects/awesome_blogs_front/admin-front/src/router/index.tsx":"6","/Users/mac/projects/awesome_blogs_front/admin-front/src/views/MainContent.tsx":"7","/Users/mac/projects/awesome_blogs_front/admin-front/src/views/Register.tsx":"8"},{"size":510,"mtime":1608476738000,"results":"9","hashOfConfig":"10"},{"size":2078,"mtime":1608476406000,"results":"11","hashOfConfig":"10"},{"size":3318,"mtime":1608564484000,"results":"12","hashOfConfig":"10"},{"size":440,"mtime":1608562721000,"results":"13","hashOfConfig":"10"},{"size":665,"mtime":1608562199000,"results":"14","hashOfConfig":"10"},{"size":577,"mtime":1608563257000,"results":"15","hashOfConfig":"10"},{"size":2725,"mtime":1608208335000,"results":"16","hashOfConfig":"10"},{"size":2846,"mtime":1608565383000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1jtlr2e",{"filePath":"21","messages":"22","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mac/projects/awesome_blogs_front/admin-front/src/index.tsx",[],[],"/Users/mac/projects/awesome_blogs_front/admin-front/src/untils/axios_extend.tsx",["36","37","38","39","40","41","42","43","44"],"import Axios from \"axios\";\nimport {message, Spin} from 'antd'\nimport React, { useEffect, useState} from \"react\";\n\nconst normalReq = Axios.create({\n    baseURL: '/api',\n    timeout: 3000,\n})\n\nconst spinSwitch = {loading: false}\n\nexport function get<T>(url: string, params: any, data: any) {\n    return normalReq.get<T>(url, {params, data})\n}\n\nexport function post<T>(url: string, data: any) {\n    return normalReq.post<T>(url, data)\n}\n\nnormalReq.interceptors.request.use(config => {\n    spinSwitch.loading = true\n    // config.headers = { ...config.headers, Authorization: `Bearer ${getToken()}` }\n    return config\n})\nnormalReq.interceptors.response.use(res => {\n    if (res.data.err !== 0) {\n        message.error(res.data.msg, 1)\n    }\n\n    spinSwitch.loading = false\n    return res.data\n}, err => {\n    // loadingPublisher.sub();\n    spinSwitch.loading = false\n    if (err.response.status === 401) {\n        message.error(err.response.data.msg, 1)\n    }\n    if (err.response.status === 404) {\n        message.error('未知接口或接口地址错误', 1)\n    } else message.error(err.response.data.msg || err.response.data, 1)\n})\n\n\n// export class MySpin extends Component<{App:any},{loading:boolean}>{\n//     constructor(props:any) {\n//         super(props);\n//         this.state = {\n//             loading:false\n//         }\n//     }\n//    componentDidMount(): void {\n//        Object.defineProperty(spinSwitch,'loading',{\n//            set:(v: any) => {\n//                this.setState({loading:v})\n//            }\n//        })\n//    }\n//\n//     render() {\n//       return  <Spin spinning={this.state.loading}>\n//             {this.props.App}\n//         </Spin>\n//     }\n// }\n\n\nexport const MySpin = (props: { App: React.ReactNode; }) => {\n    const [loading, setLoading] = useState<boolean>(false)\n    useEffect(() => {\n        Object.defineProperty(spinSwitch, 'loading', {\n            set: (v: boolean) => {\n                setLoading(v)\n            }\n        })\n    }, [])\n    return (\n        <Spin spinning={loading}>\n            {props.App}\n        </Spin>\n    )\n}","/Users/mac/projects/awesome_blogs_front/admin-front/src/views/Login.tsx",["45","46"],"/Users/mac/projects/awesome_blogs_front/admin-front/src/api/index.tsx",["47","48"],"/Users/mac/projects/awesome_blogs_front/admin-front/src/untils/FormValidation.ts",[],"/Users/mac/projects/awesome_blogs_front/admin-front/src/router/index.tsx",["49"],"/Users/mac/projects/awesome_blogs_front/admin-front/src/views/MainContent.tsx",["50"],"/Users/mac/projects/awesome_blogs_front/admin-front/src/views/Register.tsx",["51"],{"ruleId":"52","severity":1,"message":"53","line":12,"column":8,"nodeType":"54","messageId":"55","endLine":12,"endColumn":60},{"ruleId":"52","severity":1,"message":"56","line":12,"column":37,"nodeType":"57","messageId":"58","endLine":12,"endColumn":48},{"ruleId":"59","severity":1,"message":"60","line":12,"column":45,"nodeType":"61","messageId":"62","endLine":12,"endColumn":48,"suggestions":"63"},{"ruleId":"52","severity":1,"message":"64","line":12,"column":50,"nodeType":"57","messageId":"58","endLine":12,"endColumn":59},{"ruleId":"59","severity":1,"message":"60","line":12,"column":56,"nodeType":"61","messageId":"62","endLine":12,"endColumn":59,"suggestions":"65"},{"ruleId":"52","severity":1,"message":"53","line":16,"column":8,"nodeType":"54","messageId":"55","endLine":16,"endColumn":48},{"ruleId":"52","severity":1,"message":"64","line":16,"column":38,"nodeType":"57","messageId":"58","endLine":16,"endColumn":47},{"ruleId":"59","severity":1,"message":"60","line":16,"column":44,"nodeType":"61","messageId":"62","endLine":16,"endColumn":47,"suggestions":"66"},{"ruleId":"52","severity":1,"message":"53","line":67,"column":23,"nodeType":"67","messageId":"55","endLine":67,"endColumn":60},{"ruleId":"68","severity":1,"message":"69","line":1,"column":16,"nodeType":"57","messageId":"70","endLine":1,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":83,"column":16,"nodeType":"54","messageId":"55","endLine":83,"endColumn":32},{"ruleId":"52","severity":1,"message":"53","line":5,"column":25,"nodeType":"67","messageId":"55","endLine":5,"endColumn":49},{"ruleId":"52","severity":1,"message":"53","line":9,"column":28,"nodeType":"67","messageId":"55","endLine":9,"endColumn":55},{"ruleId":null,"fatal":true,"severity":2,"message":"71","line":18,"column":4},{"ruleId":"52","severity":1,"message":"53","line":15,"column":16,"nodeType":"54","messageId":"55","endLine":15,"endColumn":38},{"ruleId":"52","severity":1,"message":"53","line":8,"column":16,"nodeType":"67","messageId":"55","endLine":8,"endColumn":77},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'params' should be typed with a non-any type.","Identifier","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["72","73"],"Argument 'data' should be typed with a non-any type.",["74","75"],["76","77"],"ArrowFunctionExpression","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","unusedVar","Parsing error: ',' expected.",{"messageId":"78","fix":"79","desc":"80"},{"messageId":"81","fix":"82","desc":"83"},{"messageId":"78","fix":"84","desc":"80"},{"messageId":"81","fix":"85","desc":"83"},{"messageId":"78","fix":"86","desc":"80"},{"messageId":"81","fix":"87","desc":"83"},"suggestUnknown",{"range":"88","text":"89"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"88","text":"90"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"91","text":"89"},{"range":"91","text":"90"},{"range":"92","text":"89"},{"range":"92","text":"90"},[272,275],"unknown","never",[283,286],[385,388]]