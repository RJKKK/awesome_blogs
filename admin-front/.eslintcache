[{"E:\\www\\awesome_blogs_front\\admin-front\\src\\index.tsx":"1","E:\\www\\awesome_blogs_front\\admin-front\\src\\views\\MainContent.tsx":"2","E:\\www\\awesome_blogs_front\\admin-front\\src\\router\\index.tsx":"3"},{"size":524,"mtime":1607939991420,"results":"4","hashOfConfig":"5"},{"size":2724,"mtime":1607939991423,"results":"6","hashOfConfig":"5"},{"size":665,"mtime":1607939991422,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pgbkol",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\www\\awesome_blogs_front\\admin-front\\src\\index.tsx",[],"E:\\www\\awesome_blogs_front\\admin-front\\src\\views\\MainContent.tsx",["14","15","16"],"E:\\www\\awesome_blogs_front\\admin-front\\src\\router\\index.tsx",["17","18","19"],{"ruleId":"20","severity":1,"message":"21","line":25,"column":16,"nodeType":"22","messageId":"23","endLine":25,"endColumn":48},{"ruleId":"20","severity":1,"message":"24","line":25,"column":38,"nodeType":"25","messageId":"26","endLine":25,"endColumn":47},{"ruleId":"27","severity":1,"message":"28","line":25,"column":44,"nodeType":"29","messageId":"30","endLine":25,"endColumn":47,"suggestions":"31"},{"ruleId":"27","severity":1,"message":"28","line":7,"column":15,"nodeType":"29","messageId":"30","endLine":7,"endColumn":18,"suggestions":"32"},{"ruleId":"27","severity":1,"message":"28","line":8,"column":16,"nodeType":"29","messageId":"30","endLine":8,"endColumn":19,"suggestions":"33"},{"ruleId":"27","severity":1,"message":"28","line":18,"column":14,"nodeType":"29","messageId":"30","endLine":18,"endColumn":17,"suggestions":"34"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'props' should be typed with a non-any type.","Identifier","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["35","36"],["37","38"],["39","40"],["41","42"],{"messageId":"43","fix":"44","desc":"45"},{"messageId":"46","fix":"47","desc":"48"},{"messageId":"43","fix":"49","desc":"45"},{"messageId":"46","fix":"50","desc":"48"},{"messageId":"43","fix":"51","desc":"45"},{"messageId":"46","fix":"52","desc":"48"},{"messageId":"43","fix":"53","desc":"45"},{"messageId":"46","fix":"54","desc":"48"},"suggestUnknown",{"range":"55","text":"56"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"55","text":"57"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"58","text":"56"},{"range":"58","text":"57"},{"range":"59","text":"56"},{"range":"59","text":"57"},{"range":"60","text":"56"},{"range":"60","text":"57"},[634,637],"unknown","never",[274,277],[295,298],[469,472]]